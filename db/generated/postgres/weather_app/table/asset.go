//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Asset = newAssetTable("weather_app", "asset", "")

type assetTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnInteger
	ProjectID    postgres.ColumnString
	LocationName postgres.ColumnString
	Lat          postgres.ColumnFloat
	Lon          postgres.ColumnFloat
	AssetID      postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type AssetTable struct {
	assetTable

	EXCLUDED assetTable
}

// AS creates new AssetTable with assigned alias
func (a AssetTable) AS(alias string) *AssetTable {
	return newAssetTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AssetTable with assigned schema name
func (a AssetTable) FromSchema(schemaName string) *AssetTable {
	return newAssetTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AssetTable with assigned table prefix
func (a AssetTable) WithPrefix(prefix string) *AssetTable {
	return newAssetTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AssetTable with assigned table suffix
func (a AssetTable) WithSuffix(suffix string) *AssetTable {
	return newAssetTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAssetTable(schemaName, tableName, alias string) *AssetTable {
	return &AssetTable{
		assetTable: newAssetTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newAssetTableImpl("", "excluded", ""),
	}
}

func newAssetTableImpl(schemaName, tableName, alias string) assetTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		ProjectIDColumn    = postgres.StringColumn("project_id")
		LocationNameColumn = postgres.StringColumn("location_name")
		LatColumn          = postgres.FloatColumn("lat")
		LonColumn          = postgres.FloatColumn("lon")
		AssetIDColumn      = postgres.IntegerColumn("asset_id")
		allColumns         = postgres.ColumnList{IDColumn, ProjectIDColumn, LocationNameColumn, LatColumn, LonColumn, AssetIDColumn}
		mutableColumns     = postgres.ColumnList{ProjectIDColumn, LocationNameColumn, LatColumn, LonColumn, AssetIDColumn}
		defaultColumns     = postgres.ColumnList{IDColumn}
	)

	return assetTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		ProjectID:    ProjectIDColumn,
		LocationName: LocationNameColumn,
		Lat:          LatColumn,
		Lon:          LonColumn,
		AssetID:      AssetIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
