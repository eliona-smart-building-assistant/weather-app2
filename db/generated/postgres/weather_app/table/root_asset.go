//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var RootAsset = newRootAssetTable("weather_app", "root_asset", "")

type rootAssetTable struct {
	postgres.Table

	// Columns
	ID              postgres.ColumnInteger
	ConfigurationID postgres.ColumnInteger
	ProjectID       postgres.ColumnString
	Gai             postgres.ColumnString
	AssetID         postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type RootAssetTable struct {
	rootAssetTable

	EXCLUDED rootAssetTable
}

// AS creates new RootAssetTable with assigned alias
func (a RootAssetTable) AS(alias string) *RootAssetTable {
	return newRootAssetTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RootAssetTable with assigned schema name
func (a RootAssetTable) FromSchema(schemaName string) *RootAssetTable {
	return newRootAssetTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RootAssetTable with assigned table prefix
func (a RootAssetTable) WithPrefix(prefix string) *RootAssetTable {
	return newRootAssetTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RootAssetTable with assigned table suffix
func (a RootAssetTable) WithSuffix(suffix string) *RootAssetTable {
	return newRootAssetTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRootAssetTable(schemaName, tableName, alias string) *RootAssetTable {
	return &RootAssetTable{
		rootAssetTable: newRootAssetTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newRootAssetTableImpl("", "excluded", ""),
	}
}

func newRootAssetTableImpl(schemaName, tableName, alias string) rootAssetTable {
	var (
		IDColumn              = postgres.IntegerColumn("id")
		ConfigurationIDColumn = postgres.IntegerColumn("configuration_id")
		ProjectIDColumn       = postgres.StringColumn("project_id")
		GaiColumn             = postgres.StringColumn("gai")
		AssetIDColumn         = postgres.IntegerColumn("asset_id")
		allColumns            = postgres.ColumnList{IDColumn, ConfigurationIDColumn, ProjectIDColumn, GaiColumn, AssetIDColumn}
		mutableColumns        = postgres.ColumnList{ConfigurationIDColumn, ProjectIDColumn, GaiColumn, AssetIDColumn}
		defaultColumns        = postgres.ColumnList{}
	)

	return rootAssetTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		ConfigurationID: ConfigurationIDColumn,
		ProjectID:       ProjectIDColumn,
		Gai:             GaiColumn,
		AssetID:         AssetIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
