//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Configuration = newConfigurationTable("weather_app", "configuration", "")

type configurationTable struct {
	postgres.Table

	// Columns
	ID                postgres.ColumnInteger
	APIAccessChangeMe postgres.ColumnString
	RefreshInterval   postgres.ColumnInteger
	RequestTimeout    postgres.ColumnInteger
	AssetFilter       postgres.ColumnString
	Active            postgres.ColumnBool
	Enable            postgres.ColumnBool
	ProjectIds        postgres.ColumnString
	UserID            postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type ConfigurationTable struct {
	configurationTable

	EXCLUDED configurationTable
}

// AS creates new ConfigurationTable with assigned alias
func (a ConfigurationTable) AS(alias string) *ConfigurationTable {
	return newConfigurationTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ConfigurationTable with assigned schema name
func (a ConfigurationTable) FromSchema(schemaName string) *ConfigurationTable {
	return newConfigurationTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ConfigurationTable with assigned table prefix
func (a ConfigurationTable) WithPrefix(prefix string) *ConfigurationTable {
	return newConfigurationTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ConfigurationTable with assigned table suffix
func (a ConfigurationTable) WithSuffix(suffix string) *ConfigurationTable {
	return newConfigurationTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newConfigurationTable(schemaName, tableName, alias string) *ConfigurationTable {
	return &ConfigurationTable{
		configurationTable: newConfigurationTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newConfigurationTableImpl("", "excluded", ""),
	}
}

func newConfigurationTableImpl(schemaName, tableName, alias string) configurationTable {
	var (
		IDColumn                = postgres.IntegerColumn("id")
		APIAccessChangeMeColumn = postgres.StringColumn("api_access_change_me")
		RefreshIntervalColumn   = postgres.IntegerColumn("refresh_interval")
		RequestTimeoutColumn    = postgres.IntegerColumn("request_timeout")
		AssetFilterColumn       = postgres.StringColumn("asset_filter")
		ActiveColumn            = postgres.BoolColumn("active")
		EnableColumn            = postgres.BoolColumn("enable")
		ProjectIdsColumn        = postgres.StringColumn("project_ids")
		UserIDColumn            = postgres.StringColumn("user_id")
		allColumns              = postgres.ColumnList{IDColumn, APIAccessChangeMeColumn, RefreshIntervalColumn, RequestTimeoutColumn, AssetFilterColumn, ActiveColumn, EnableColumn, ProjectIdsColumn, UserIDColumn}
		mutableColumns          = postgres.ColumnList{APIAccessChangeMeColumn, RefreshIntervalColumn, RequestTimeoutColumn, AssetFilterColumn, ActiveColumn, EnableColumn, ProjectIdsColumn, UserIDColumn}
		defaultColumns          = postgres.ColumnList{IDColumn, RefreshIntervalColumn, RequestTimeoutColumn, ActiveColumn, EnableColumn}
	)

	return configurationTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		APIAccessChangeMe: APIAccessChangeMeColumn,
		RefreshInterval:   RefreshIntervalColumn,
		RequestTimeout:    RequestTimeoutColumn,
		AssetFilter:       AssetFilterColumn,
		Active:            ActiveColumn,
		Enable:            EnableColumn,
		ProjectIds:        ProjectIdsColumn,
		UserID:            UserIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
